name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: university_lms_test
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
          
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v2
    
    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, zip
        coverage: xdebug
        
    - name: 📦 Cache Composer packages
      id: composer-cache
      uses: actions/cache@v2
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
          
    - name: 🔧 Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      
    - name: 📝 Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      
    - name: 🔑 Generate key
      run: php artisan key:generate
      
    - name: 🗃️ Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
      
    - name: 🧪 Execute tests via PHPUnit
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: university_lms_test
        DB_USERNAME: user
        DB_PASSWORD: password
      run: vendor/bin/phpunit --coverage-text
      
  deploy:
    name: 🚀 Deploy
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: 🔐 Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}
        
    - name: 🚀 Deploy with rsync
      run: |
        rsync -avz --delete \
          --exclude='.git*' \
          --exclude='tests' \
          --exclude='*.md' \
          --exclude='phpunit.xml' \
          ./ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}
          
    - name: 🔄 Run Deployment Commands
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ${{ secrets.DEPLOY_PATH }}
          php artisan down
          composer install --no-dev --optimize-autoloader
          php artisan migrate --force
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          php artisan up
          
  notify:
    name: 📢 Notify
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📧 Send Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: https://github.com/KOSALSENSOK096.png?size=48
        SLACK_MESSAGE: 'Pipeline completed with status: ${{ job.status }}'
        SLACK_TITLE: 🚀 Deployment Status
        SLACK_USERNAME: GitHub Actions 